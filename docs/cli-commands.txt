Jupiter Swap Tool CLI — Command Reference (v1.2.1)
==================================================

This file groups the most common verbs by theme and highlights notable flags or behaviours. Commands accept wallet filenames *and* registry numbers (e.g. `crew_6.json`, `6`, or `#6`) unless noted otherwise.

==========================================================================
Wallet Management & Registry
--------------------------------------------------------------------------
- `generate <count> [prefix]`
  Create keypairs under `keypairs/`. Files are auto-numbered and added to the registry manifest.

- `import-wallet --secret <key|mnemonic|JSON> [--prefix <name>] [--path <derivationPath>] [--passphrase <phrase>] [--force]`
  Import an existing keypair. Positional secrets are accepted; use `--force` to overwrite.

- `wallet list`
  Table view of every wallet: `#`, filename, role, master, group, SOL balance, guard status.

- `wallet info <#|filename>`
  Detailed view (public key, role, group, master, SOL balance, slave list if applicable).

- `wallet groups`
  Summaries per 5-wallet cohort: master, slaves, SOL per wallet. Numeric input accepted.

- `wallet sync`
  Regenerate `wallets_manifest.json` from the current contents of `keypairs/`.

- `wallet transfer <from> <to> <amount> [token]`
  Transfer SOL between wallets. `amount` accepts decimals or `all`. Only SOL is supported today.

- `wallet wrap <wallet> [amount|all|*] [--raw]` / `wallet unwrap <wallet> [...]`
  Wrap/unwrap SOL ↔ wSOL. Defaults to max spendable / entire wSOL balance; `--raw` treats values as lamports.

- `list`
  Print filenames and public keys (legacy command; `wallet list` is richer).

- `balances [mint[:symbol] ...]`
  Show SOL + SPL balances per wallet. Always prints requested mints even if zero.

- `wallet-guard-status [--summary] [--refresh]`
  Inspect or refresh the swap guard (wallets below 0.005 SOL are disabled until topped up).

- `force-reset-wallets`
  Clear guard state (enables every wallet until the next `balances` run recalculates).

==========================================================================
Funding & Aggregation
--------------------------------------------------------------------------
- `fund-all <from> <lamportsEach>`
  Send an equal lamport amount from the source wallet to every other wallet.

- `fund <from> <to> <lamports>` / `send <from> <to> <lamports>`
  Single SOL transfer (numbers or filenames). See `wallet transfer` for a unified UX.

- `redistribute <anchorWallet>`
  Even out spendable SOL across all wallets while preserving reserves and respecting guard thresholds.

- `aggregate <targetWallet>`
  Cascade SOL from the tail wallet backwards toward the target. Keeps a gas reserve in each donor.

- `aggregate-hierarchical`
  Slaves send SOL to their group master (e.g. 5→1, 10→6, 15→11).

- `aggregate-masters`
  Each group master (6, 11, 16, …) sends SOL to wallet #1 (master-master).

- `airdrop <wallet> <lamports>` / `airdrop-all <lamports>`
  Devnet-only utilities for requesting SOL airdrops.

==========================================================================
Swap & Sweep Operations
--------------------------------------------------------------------------
- `swap <inputMint> <outputMint> [amount|all|random]`
  Core swap verb. Amount defaults to session config (`SWAP_AMOUNT_MODE`). Ultra is used by default; transient errors trigger retries before falling back to Lite.

- `swap-all <inputMint> <outputMint>`
  Equivalent to `swap … all`.

- `swap-sol-to <mint> [amount|all|random]`
  Convenience SOL wrapper (identical semantics to `swap`).

- `buckshot`
  Splits SOL evenly across the `swappable` catalog, then keeps an interactive loop so you can rotate holdings into arbitrary mints (e.g. paste mint, hit Enter to flatten to SOL).

- `long-circle [extra|primary-only]`
  Deterministic (per wallet) multi-hop cycle through curated tokens. `extra` adds a SOL exit segment; `primary-only` restricts to high-liquidity pairs.

- `sweep-to-btc-eth`
  Sweep all tokens to SOL, then split SOL into wBTC / cbBTC / wETH using per-wallet weights.

- `sol-usdc-popcat`
  Two-hop SOL→USDC→POPCAT chain for meme allocations.

- `reclaim-sol`
  Close zero-balance SPL & Token-2022 accounts. Batches up to 12 closes per transaction before falling back to singles. Skips programs with withheld fees and logs guidance.

==========================================================================
Prewritten Flows & Campaigns
--------------------------------------------------------------------------
- `arpeggio`, `horizon`, `echo`
  Deterministic meme rotations with pre-defined durations (15 min, 60 min, 6 hr respectively).

- `icarus`, `zenith`, `aurora`
  Randomised meme pools with different pacing.

- `titan`, `odyssey`, `sovereign`
  Whale flows (higher notional values, SOL safety checkpoints).

- `crew1-cycle`, `interval-cycle`
  Utility flows for continuous trading and monitoring.

- `buckshot`, `long-circle`
  See “Swap & Sweep Operations”; both double as flows and interactive tools.

==========================================================================
Jupiter Lend (Earn Beta)
--------------------------------------------------------------------------
- `lend earn tokens [--refresh]`
  List earn vaults. `--refresh` pulls new catalog data from Jupiter.

- `lend earn deposit <wallets|*> <mint|jlSymbol|*> <amount|*> [--extra '{..}']`
  Deposit base assets (SOL, USDC, USDT, wBTC, cbBTC, wETH) *or* JL share tokens. `*` auto-selects the highest-yield vault a wallet holds.

- `lend earn withdraw ...`, `lend earn mint ...`, `lend earn redeem ...`
  Mirror the API semantics. Withdraw/redeem auto-create ATAs, unwrap SOL when necessary, and retry once if ATA creation requires a fresh balance snapshot.

- `lend earn positions <wallets|*>`
  Fetch per-wallet share and underlying balances. Wallet selectors accept comma-separated filenames, numbers, or pubkeys.

- `lend earn earnings <wallets|*>`
  Reported earnings per position.

- `lend overview`
  Portfolio-wide snapshot (positions + earnings) for every wallet discovered.

> Borrow commands are disabled while Jupiter’s public borrow endpoints remain offline. The CLI prints a “coming soon” warning instead of hitting the API.

==========================================================================
Diagnostics & Utilities
--------------------------------------------------------------------------
- `tokens [--verbose] [--refresh]`
  Print the token catalog. `--refresh` hits the Jupiter Tokens API first.

- `wallet-guard-status [--refresh] [--summary]`
  See guard state; `--refresh` triggers a balance check.

- `hotkeys [--all|context...] [--no-title] [--indent <n>]`
  Render hotkey tables without launching the interactive menu.

- `test-rpcs all`
  Probe every RPC in rotation, logging health per endpoint.

- `test-rpcs index <n>` / `test-rpcs match <substring>` / `test-rpcs url <endpoint>`
  Target a specific RPC for diagnostics.

- `test-ultra [inputMint] [outputMint] [amount] [--wallet <name>] [--submit]`
  Dry-run (default) or submit (`--submit`) an Ultra order. Accepts custom wallet, amount, and mints.

- `wallet-guard-status`, `force-reset-wallets`
  Guard introspection and reset (listed above for completeness).

- `tokens --refresh`
  Common troubleshooting step: refresh token metadata from Jupiter before swapping.

==========================================================================
Launcher Script (`run_cli_trader.command`)
--------------------------------------------------------------------------
The macOS launcher wraps the CLI with:
- RPC bootstrap + guard refresh on startup.
- Hotkey-driven menus (Wallet tools, Advanced tools, Lend menu, Test utilities).
- Background guard refresh option.
- Safety prompts before destructive operations.

You can run the same commands by calling `node cli_trader.js …` directly; the launcher simply shells out to the CLI.

==========================================================================
Testing
--------------------------------------------------------------------------
- `npm test`
  Runs the Node test runner against unit suites covering wallet registry, campaign planning, ATA helpers, and other shared utilities. Use this before submitting changes.

==========================================================================
Tips
--------------------------------------------------------------------------
- Use `wallet list` often; it is the quickest way to verify numbering, guard state, and balances.
- Keep `rpc_endpoints.txt` populated with diverse providers (Helius, Triton, public RPC) so the rotation has options.
- For flows, set `SWAP_AMOUNT_MODE=random` to randomise amounts globally, or supply explicit amounts on the CLI.
- Enable `JUPITER_SWAP_TOOL_TIMING=1` to profile planning vs execution costs for flows and sweeps.
