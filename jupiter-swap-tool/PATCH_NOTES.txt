[v1.0.1] 2025-10-18
- Auto-create the keypairs directory and rpc_endpoints.txt when missing, with startup announcements.
- crew_1.json now bypasses wallet guard thresholds while continuing to log guard status.
- Updated launch banners to show the version and “made by zayd / cold” and refreshed header coloring with cyan accents.
- Introduced this patch notes log for tracking future Codex-assisted sessions.
[v1.0.2] 2025-10-18
- Refactored startup resource checks to eliminate duplicate logic and added context comments for future contributors.
- crew_1.json guard override hardened across load/refresh cycles to guarantee it stays active regardless of balance.
- Applied consistent cyan styling to the launcher ASCII banner and tightened CLI color usage for readability.
- Buckshot pre-planning landed (wallet allocations computed before swaps). Roadmap for extending the same pattern to Long Circle and BTC/ETH sweep documented in README + ARCHITECTURE_PLAN.
- Introduced optional timing instrumentation (`JUPITER_SWAP_TOOL_TIMING=1`) for Buckshot, Long Circle, and BTC/ETH sweep to separate planning vs execution durations.

## [1.1.0] 2025-10-21
- Swaps now use Jupiter Ultra by default (`https://api.jup.ag/ultra/91233f8d-d064-48c7-a97a-87b5d4d8a511`; override via `JUPITER_ULTRA_API_KEY`) with logging of client order id, expected out amount, payload snippets, and execution signatures. Legacy Lite quote/swap remains available via `JUPITER_SWAP_ENGINE=lite`.
- Swapped token discovery to Jupiter Tokens API v2 and price lookups to Price API v3; added `tokens --refresh` to pull the latest catalog.
- Scaffolded Jupiter Lend (Earn/Borrow) CLI commands plus launcher menu with verbose API logging so we can iterate against the beta endpoints.
- Extended aggregation so donors pay the previous wallet in descending order, keeping per-wallet gas reserves intact.

## [1.1.1] 2025-10-21
- Lend earn deposit/withdraw now auto-select eligible base assets or share tokens when you pass `*`, defaulting to the max spendable balance per wallet while leaving a SOL reserve for rent/gas (and wrapping SOL as needed).
- Launcher lend prompts accept blank inputs to trigger the wildcard behaviour so operators can fan actions across every active wallet without typing paths or amounts.

## [1.2.0] 2025-10-22
- Wallet discovery now syncs with a persistent `wallets_manifest.json`, giving every keypair a stable number, group, and role (master/master-master/slave) and keeping the CLI output ordered by creation time.
- `shared/wallet_helpers.js` gained robust keypair parsers (array JSON, object JSON, base58), optional logger hooks, and automatic registry sync so downstream commands inherit metadata without extra plumbing.
- Added deterministic Solana campaign utilities under `chains/solana/` (seeded RNG, plan truncation, tag filtering) and exposed them to tests for reproducible automation planning.
- Rounded out test coverage for ATA creation + campaign randomisation via Node’s built-in runner; run `npm test` to confirm the helper layer before shipping.
- Refreshed docs and launcher artefacts to advertise v1.2.0 and highlight the new registry architecture for future contributors.

## [1.1.2] 2025-10-21
- Added a dedicated `test` hotkey (and launcher sub-menu) grouping RPC diagnostics and an Ultra API swap check in one place.
- New `test-ultra` CLI command performs a Jupiter Ultra order dry run (or live swap with `--submit`) so you can verify the default API key or your own credentials end-to-end.
- Introduced `lend overview` to fetch earn positions, earnings, and borrow positions across every wallet with a single command (also exposed in the launcher lend menu); `lend borrow close <wallet> *` (and blank launcher prompt) now closes every borrow position without manually copying IDs.
- Lend earn deposit/withdraw flows now auto-submit returned transactions from Jupiter unless you pass `--no-send`, so successful API responses immediately land on-chain.
- Automatically creates any missing associated token accounts before submitting lend earn transactions, preventing the `depositor_token_account` initialization error on first-time deposits.
- Lend earn deposits now apply dynamic SOL buffers (starting at ~70% of spendable SOL, tapering on retries) and skip wallets below 0.005 SOL of headroom, eliminating endless insufficient-funds loops while clearly instructing operators when to top up.
- Lend earn position queries now print wallet-by-wallet counts and sample token balances, so you can tell at a glance whether any JL shares exist after a deposit.
